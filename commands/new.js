const path = require('path');
const { getUserInputs2 } = require('../utils/userInput');
const { createProject } = require('../utils/setups/projectSetup');
const { setupCleanArchitecture } = require('../utils/configs/setupCleanArchitecture');
const { setupAuth } = require('../utils/setups/setupAuth');
const { setupSwagger } = require('../utils/setups/setupSwagger');
const { setupDatabase } = require('../utils/setups/setupDatabase');
const { configureDocker } = require('../utils/configs/configureDocker');
const { setupBootstrapLogger } = require('../utils/setups/setupLogger');
const { logSuccess } = require('../utils/loggers/logSuccess');
const { logInfo } = require('../utils/loggers/logInfo');
const readline = require('readline-sync');

async function newCommand(projectName, flags = {}) {
  let inputs;

  if (flags.light && projectName) {
    console.log('🚀 Mode Light activé - Configuration rapide');

    const orm = flags.orm || 'prisma';
    const validOrms = ['prisma', 'typeorm', 'mongoose'];

    if (!validOrms.includes(orm)) {
      console.log(`⚠️  ORM non reconnu: ${orm}. Utilisation de Prisma par défaut.`);
    }

    inputs = {
      projectName: projectName,
      useYarn: false,
      useDocker: true,
      useAuth: flags.auth || false,
      useSwagger: flags.swagger || false,
      swaggerInputs: flags.swagger ? {
        title: `${projectName} API`,
        description: 'API generated by NestCraftX',
        version: '1.0.0',
        endpoint: 'api/docs'
      } : undefined,
      packageManager: 'npm',
      entitiesData: {
        entities: [],
        relations: []
      },
      selectedDB: orm === 'mongoose' ? 'mongodb' : 'postgresql',
      dbConfig: orm === 'mongoose' ? {
        orm: 'mongoose',
        MONGO_URI: 'mongodb://localhost:27017',
        MONGO_DB: projectName
      } : {
        orm: validOrms.includes(orm) ? orm : 'prisma',
        POSTGRES_USER: 'postgres',
        POSTGRES_PASSWORD: 'postgres',
        POSTGRES_DB: projectName,
        POSTGRES_HOST: 'localhost',
        POSTGRES_PORT: '5432'
      }
    };

    if (flags.auth) {
      console.log('🔐 Auth activé : ajout automatique de l\'entité User');
      inputs.entitiesData.entities.push({
        name: 'user',
        fields: [
          { name: 'email', type: 'string' },
          { name: 'password', type: 'string' },
          { name: 'isActive', type: 'boolean' }
        ]
      });
    }

  } else if (projectName) {
    console.log('🚀 Mode Full - Configuration complète');
    console.log(`📦 Nom du projet: ${projectName}\n`);

    inputs = await getUserInputs2();
    inputs.projectName = projectName;

    if (flags.orm) {
      const validOrms = ['prisma', 'typeorm', 'mongoose'];
      if (validOrms.includes(flags.orm)) {
        inputs.dbConfig.orm = flags.orm;
        logInfo(`ORM forcé via CLI: ${flags.orm}`);
      }
    }

    if (flags.auth !== undefined) {
      inputs.useAuth = flags.auth === true || flags.auth === 'true';
    }

    if (flags.swagger !== undefined) {
      inputs.useSwagger = flags.swagger === true || flags.swagger === 'true';
    }

  } else {
    console.log('\n🌟 Bienvenue sur NestCraftX CLI 🌟\n');
    inputs = await getUserInputs2();
  }

  logInfo('🏗️  Démarrage de la génération du projet...');

  await createProject(inputs);
  await setupCleanArchitecture(inputs);

  if (inputs.useAuth) await setupAuth(inputs);

  if (inputs.useSwagger) {
    await setupSwagger(inputs.swaggerInputs);
  } else {
    setupBootstrapLogger();
  }

  if (inputs.useDocker) await configureDocker(inputs);

  await setupDatabase(inputs);

  console.log('\n' + '='.repeat(60));
  logSuccess(`✨ Projet ${inputs.projectName} créé avec succès!`);
  console.log('='.repeat(60));

  console.log('\n📊 Résumé de la configuration:');
  console.log(`   📁 Projet: ${inputs.projectName}`);
  console.log(`   🗄️  Base de données: ${inputs.selectedDB}`);
  console.log(`   🔧 ORM: ${inputs.dbConfig.orm}`);
  console.log(`   🔐 Auth: ${inputs.useAuth ? 'Oui' : 'Non'}`);
  console.log(`   📚 Swagger: ${inputs.useSwagger ? 'Oui' : 'Non'}`);
  console.log(`   🐳 Docker: ${inputs.useDocker ? 'Oui' : 'Non'}`);
  console.log(`   📦 Entités: ${inputs.entitiesData.entities.length}`);

  console.log('\n🚀 Prochaines étapes:');
  console.log(`   1. cd ${inputs.projectName}`);
  console.log(`   2. ${inputs.packageManager} run start:dev`);

  if (inputs.useSwagger) {
    console.log(`   3. Ouvrir http://localhost:3000/${inputs.swaggerInputs.endpoint}`);
  }

  console.log('\n💡 Commandes utiles:');
  console.log('   - nestcraftx test      Vérifier l\'environnement');
  console.log('   - nestcraftx info      Informations sur le CLI');
  console.log('   - nestcraftx --help    Aide complète\n');
}

module.exports = newCommand;
