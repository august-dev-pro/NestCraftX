const { getUserInputs2 } = require('../utils/userInput');
const { createProject } = require('../utils/setups/projectSetup');
const { setupCleanArchitecture } = require('../utils/configs/setupCleanArchitecture');
const { setupLightArchitecture } = require('../utils/configs/setupLightArchitecture');
const { setupAuth } = require('../utils/setups/setupAuth');
const { setupSwagger } = require('../utils/setups/setupSwagger');
const { setupDatabase } = require('../utils/setups/setupDatabase');
const { configureDocker } = require('../utils/configs/configureDocker');
const { setupBootstrapLogger } = require('../utils/setups/setupLogger');
const { logSuccess } = require('../utils/loggers/logSuccess');
const { logInfo } = require('../utils/loggers/logInfo');
const { logError } = require('../utils/loggers/logError');
const { generateEnvFile, writeEnvFile } = require('../utils/envGenerator');

async function newCommand(projectName, flags = {}) {
  if (!projectName) {
    console.log('\n  Bienvenue sur NestCraftX CLI  \n');
    const inputs = await getUserInputs2();
    return executeProjectSetup(inputs);
  }

  const mode = determineMode(flags);
  const inputs = mode === 'light'
    ? buildLightModeInputs(projectName, flags)
    : await buildFullModeInputs(projectName, flags);

  return executeProjectSetup(inputs);
}

function determineMode(flags) {
  if (flags.light) return 'light';
  if (flags.full) return 'full';
  if (flags.mode) return flags.mode;
  return 'full';
}

function buildLightModeInputs(projectName, flags) {
  console.log('  Mode LIGHT - Configuration rapide\n');

  const orm = flags.orm || 'prisma';
  const validOrms = ['prisma', 'typeorm', 'mongoose'];

  if (!validOrms.includes(orm)) {
    logError(`ORM non reconnu: ${orm}. Utilisation de Prisma par defaut.`);
  }

  const inputs = {
    projectName,
    mode: 'light',
    useYarn: false,
    useDocker: flags.docker !== false,
    useAuth: !!flags.auth,
    useSwagger: !!flags.swagger,
    swaggerInputs: flags.swagger ? {
      title: `${projectName} API`,
      description: 'API generated by NestCraftX',
      version: '1.0.0',
      endpoint: 'api/docs'
    } : undefined,
    packageManager: 'npm',
    entitiesData: {
      entities: [],
      relations: []
    },
    selectedDB: orm === 'mongoose' ? 'mongodb' : 'postgresql',
    dbConfig: orm === 'mongoose' ? {
      orm: 'mongoose',
      MONGO_URI: 'mongodb://localhost:27017',
      MONGO_DB: projectName
    } : {
      orm: validOrms.includes(orm) ? orm : 'prisma',
      POSTGRES_USER: 'postgres',
      POSTGRES_PASSWORD: 'postgres',
      POSTGRES_DB: projectName,
      POSTGRES_HOST: 'localhost',
      POSTGRES_PORT: '5432'
    }
  };

  if (flags.auth) {
    logInfo('Auth active : ajout automatique de l\'entite User');
    inputs.entitiesData.entities.push({
      name: 'user',
      fields: [
        { name: 'email', type: 'string' },
        { name: 'password', type: 'string' },
        { name: 'isActive', type: 'boolean' }
      ]
    });
  }

  return inputs;
}

async function buildFullModeInputs(projectName, flags) {
  console.log('  Mode FULL - Configuration complete');
  console.log(`  Nom du projet: ${projectName}\n`);

  const inputs = await getUserInputs2();
  inputs.projectName = projectName;
  inputs.mode = 'full';

  if (flags.orm) {
    const validOrms = ['prisma', 'typeorm', 'mongoose'];
    if (validOrms.includes(flags.orm)) {
      inputs.dbConfig.orm = flags.orm;
      logInfo(`ORM force via CLI: ${flags.orm}`);
    }
  }

  if (flags.auth !== undefined) {
    inputs.useAuth = flags.auth === true || flags.auth === 'true';
  }

  if (flags.swagger !== undefined) {
    inputs.useSwagger = flags.swagger === true || flags.swagger === 'true';
  }

  if (flags.docker !== undefined) {
    inputs.useDocker = flags.docker === true || flags.docker === 'true';
  }

  return inputs;
}

async function executeProjectSetup(inputs) {
  try {

    logInfo('Demarrage de la generation du projet...');

    await createProject(inputs);

    if (inputs.mode === 'light') {
      await setupLightArchitecture(inputs);
    } else {
      await setupCleanArchitecture(inputs);
    }

    if (inputs.useAuth) await setupAuth(inputs);

    if (inputs.useSwagger) {
      await setupSwagger(inputs.swaggerInputs);
    } else {
      setupBootstrapLogger();
    }

    if (inputs.useDocker) await configureDocker(inputs);

    await setupDatabase(inputs);

    const envContent = generateEnvFile(inputs);
    writeEnvFile(envContent);

    printSuccessSummary(inputs);
  } catch (error) {
    logError(`Erreur lors de la creation du projet: ${error.message}`);
    throw error;
  }
}

function printSuccessSummary(inputs) {
  console.log('\n' + '='.repeat(60));
  logSuccess(`Projet ${inputs.projectName} cree avec succes!`);
  console.log('='.repeat(60));

  console.log('\nResume de la configuration:');
  console.log(`   Projet: ${inputs.projectName}`);
  console.log(`   Mode: ${inputs.mode || 'full'}`.toUpperCase());
  console.log(`   Base de donnees: ${inputs.selectedDB}`);
  console.log(`   ORM: ${inputs.dbConfig.orm}`);
  console.log(`   Auth: ${inputs.useAuth ? 'Oui' : 'Non'}`);
  console.log(`   Swagger: ${inputs.useSwagger ? 'Oui' : 'Non'}`);
  console.log(`   Docker: ${inputs.useDocker ? 'Oui' : 'Non'}`);
  console.log(`   Entites: ${inputs.entitiesData.entities.length}`);

  console.log('\nProchaines etapes:');
  console.log(`   1. cd ${inputs.projectName}`);
  console.log(`   2. ${inputs.packageManager} run start:dev`);

  if (inputs.useSwagger) {
    console.log(`   3. Ouvrir http://localhost:3000/${inputs.swaggerInputs.endpoint}`);
  }

  console.log('\nCommandes utiles:');
  console.log('   - nestcraftx test      Verifier l\'environnement');
  console.log('   - nestcraftx info      Informations sur le CLI');
  console.log('   - nestcraftx --help    Aide complete\n');
}

module.exports = newCommand;
